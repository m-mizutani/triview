package main

import (
	"fmt"

	"github.com/m-mizutani/goerr"
	"github.com/urfave/cli/v2"
	"go.etcd.io/bbolt"
)

const (
	vulnerabilityBucket = "vulnerability"
)

func newVulnerabilityCommand(cfg *config) *cli.Command {
	return &cli.Command{
		Name:      "vulnerability",
		Aliases:   []string{"vuln"},
		Usage:     "Show vulnerability",
		ArgsUsage: "[VulnID]",
		Action: func(c *cli.Context) error {
			vulnID := c.Args().Get(0)
			if vulnID == "" {
				return goerr.New("VulnID is required (e.g. CVE-2099-2134")
			}

			return showVulnerability(cfg, vulnID)
		},
	}
}

func showVulnerability(cfg *config, vulnID string) error {
	view := func(tx *bbolt.Tx) error {
		vulnBucket := tx.Bucket([]byte(vulnerabilityBucket))
		if vulnBucket == nil {
			return goerr.Wrap(errInvalidDatabase, "vulnerability bucket is not found")
		}

		data := vulnBucket.Get([]byte(vulnID))
		if data == nil {
			return goerr.Wrap(errResourceNotFound).With("VulnID", vulnID)
		}

		fmt.Fprintf(cfg.out, "%s\n", string(data))
		return nil
	}

	if err := cfg.db.View(view); err != nil {
		return err
	}

	return nil
}
